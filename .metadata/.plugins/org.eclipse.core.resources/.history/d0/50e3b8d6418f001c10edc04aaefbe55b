package com.cmc.app.user.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.cmc.app.user.entity.User;
import com.cmc.app.user.service.UserService;

@RestController
@RequestMapping("users")
public class UserController {

	@Autowired
	private UserService userService;
	
	@GetMapping("/list")
	public List<User> findAll(User users){
		return userService.findAll(users);		
	}
	
	@GetMapping("/user/{userId}")
	public ResponseEntity<User> getUserbyUserId(@PathVariable("userId") Long userId){
		User user = userService.getUserbyUserId(userId);
		if(user == null) {
			return ResponseEntity.notFound().build();
		}
		User users = userService.getUserbyUserId(userId);
		return ResponseEntity.ok(users);
	}
	
	@PostMapping("/save")
	public User save(@RequestBody User users) {			
		return userService.save(users);
	}
	
	@DeleteMapping("/delete/{id}")
	public void delete(@PathVariable Long id) {
		userService.delete(id);
	}
	
	@PutMapping("/update/{id}")
	@ResponseStatus(value = HttpStatus.CREATED)
	public User edit(@RequestBody User users, @PathVariable Long id) {
		User userNext = userService.getUserbyUserId(id);
		
		userNext.setName(userNext.getName());
		userNext.setSecondName(userNext.getSecondName());	
		
		
		return userService.save(userNext);		
	}
	
	/*
	@PutMapping("/update/{id}")
	public ResponseEntity<?> update(@PathVariable("id") int id, @RequestBody NuevoUsuario nuevoUsuario) {
		if (!userService.existsById(id))
			return new ResponseEntity(new Mensaje("no existe"), HttpStatus.NOT_FOUND);
		if (usuarioService.existsByNombre(nuevoUsuario.getNombre())
				&& usuarioService.getByNombre(nuevoUsuario.getNombre()).get().getId() != id)
			return new ResponseEntity(new Mensaje("ese nombre ya existe"), HttpStatus.BAD_REQUEST);
		if (StringUtils.isBlank(nuevoUsuario.getNombre()))
			return new ResponseEntity(new Mensaje("el nombre es obligatorio"), HttpStatus.BAD_REQUEST);
		if (StringUtils.isBlank(nuevoUsuario.getNombreUsuario()))
			return new ResponseEntity(new Mensaje("el nombre de usuario es obligatorio"), HttpStatus.BAD_REQUEST);

		Usuario usuario = usuarioService.getOne(id).get();
		usuario.setNombre(nuevoUsuario.getNombre());
		usuario.setNombreUsuario(nuevoUsuario.getNombreUsuario());
		usuario.setEmail(nuevoUsuario.getEmail());
		usuario.setPassword(nuevoUsuario.getPassword());
		usuario.setDocumento(nuevoUsuario.getDocumento());
		usuarioService.save(usuario);
		return new ResponseEntity(new Mensaje("usuario actualizado"), HttpStatus.OK);
	}*/
	
}
